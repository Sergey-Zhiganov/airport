# Generated by Django 5.2.6 on 2025-10-13 11:00

import dbapp.models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import fernet_fields.fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Airline',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите название авиакомпании', max_length=255, verbose_name='Название')),
                ('IATA_code', models.CharField(help_text='Введите IATA-код авиакомпании', max_length=2, unique=True, verbose_name='IATA-код')),
                ('ICAO_code', models.CharField(help_text='Введите ICAO-код авиакомпании', max_length=3, unique=True, verbose_name='ICAO-код')),
                ('contact_person', models.CharField(help_text='Введите ФИО контактного лица', max_length=255, verbose_name='Контактное лицо')),
                ('contact_phone', models.CharField(help_text='Введите телефон контактного лица в формате +7 (XXX) XXX-XX-XX', max_length=30, validators=[dbapp.models.validate_phone], verbose_name='Телефон контактного лица')),
                ('contact_email', models.EmailField(help_text='Введите почту контактного лица', max_length=255, verbose_name='Почта контактного лица')),
            ],
            options={
                'verbose_name': 'Авикомпания',
                'verbose_name_plural': 'Авиакомпании',
            },
        ),
        migrations.CreateModel(
            name='Airport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('IATA_code', models.CharField(help_text='Введите IATA-код аэропорта', max_length=3, unique=True, verbose_name='IATA-код')),
                ('ICAO_code', models.CharField(help_text='Введите ICAO-код аэропорта', max_length=4, unique=True, verbose_name='ICAO-код')),
                ('name', models.CharField(help_text='Введите название аэропорта', max_length=255, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Аэропорт',
                'verbose_name_plural': 'Аэропорты',
            },
        ),
        migrations.CreateModel(
            name='Passenger',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('first_name', models.CharField(help_text='Введите имя пассажира', max_length=100, verbose_name='Имя')),
                ('last_name', models.CharField(help_text='Введите фамилию пассажира', max_length=100, verbose_name='Фамилия')),
                ('middle_name', models.CharField(help_text='Введите отчество пассажира (если имеется)', max_length=100, null=True, verbose_name='Отчество')),
                ('passport', fernet_fields.fields.EncryptedTextField(help_text='Введите паспорт пассажира', max_length=1024, verbose_name='Паспорт')),
                ('check_in_passed', models.BooleanField(default=False, help_text='Отметьте, пройдена ли регистрация пассажиром', verbose_name='Пройдена регистрация')),
                ('boarding_passed', models.BooleanField(default=False, help_text='Отметьте, прошел ли пассажир посадку в самолет', verbose_name='Посадка выполнена')),
                ('is_removed', models.BooleanField(default=False, help_text='Отметьте, снят ли пассажир с рейса', verbose_name='Пассажир снят с рейса')),
            ],
            options={
                'verbose_name': 'Пассажир',
                'verbose_name_plural': 'Пассажиры',
                'permissions': [('change_check_in_passed_passenger', 'Можно изменить Пройдена регистрация'), ('change_boarding_passed_passenger', 'Можно изменить Посадка выполнена')],
            },
        ),
        migrations.CreateModel(
            name='Flight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('planned_departure', models.DateTimeField(help_text='Введите планируемое время вылета (если рейс вылетает из данного аэропорта)', null=True, verbose_name='Запланированное время вылета')),
                ('planned_arrival', models.DateTimeField(help_text='Введите планируемое время прибытия (если рейс вылетает из другого аэропорта)', null=True, verbose_name='Запланированное время прибытия')),
            ],
            options={
                'verbose_name': 'Рейс',
                'verbose_name_plural': 'Рейсы',
                'permissions': [('change_flight_status', 'Можно изменить Статус рейса')],
            },
        ),
        migrations.CreateModel(
            name='FlightStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Введите название статуса', max_length=50, verbose_name='Название')),
            ],
            options={
                'verbose_name': 'Статус рейса',
                'verbose_name_plural': 'Статусы рейсов',
            },
        ),
        migrations.CreateModel(
            name='Worker',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('middle_name', models.CharField(help_text='Введите отчество (если имеется)', max_length=100, null=True, verbose_name='Отчество')),
                ('phone', fernet_fields.fields.EncryptedTextField(help_text='Введите номер телефона в формате +7 (XXX) XXX-XX-XX', max_length=1024, validators=[dbapp.models.validate_phone], verbose_name='Телефон')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Airplane',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tail_number', models.CharField(help_text='Введите бортовой номер самолета', max_length=20, unique=True, verbose_name='Бортовой номер')),
                ('name', models.CharField(help_text='Введите модель самолета', max_length=100, verbose_name='Модель')),
                ('layout', models.CharField(help_text='Введите схему, например: 3-3 или 2-2-2', max_length=20, verbose_name='Компоновка')),
                ('rows', models.PositiveIntegerField(help_text='Введите количество рядов (например: 15)', verbose_name='Количество рядов')),
                ('airline', models.ForeignKey(help_text='Выберите авиакомпанию-владельца самолета', on_delete=django.db.models.deletion.PROTECT, to='dbapp.airline', verbose_name='Авиакомпания-владелец')),
            ],
            options={
                'verbose_name': 'Самолет',
                'verbose_name_plural': 'Самолеты',
            },
        ),
        migrations.CreateModel(
            name='BoardingPass',
            fields=[
                ('id', models.OneToOneField(help_text='Выберите пассажира, который будет указан в посадочном талоне', on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to='dbapp.passenger', verbose_name='Пассажир')),
                ('seat', models.CharField(help_text='Выберите место, на которое будет назначен пассажир', max_length=5, verbose_name='Место')),
            ],
            options={
                'verbose_name': 'Посадочный талон',
                'verbose_name_plural': 'Посадочные талоны',
            },
        ),
        migrations.CreateModel(
            name='CheckInDesk',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(help_text='Введите номер стойки регистрации', max_length=20, verbose_name='Номер стойки регистрации')),
                ('is_active', models.BooleanField(default=False, help_text='Отметьте, активна ли стойка регистрации', verbose_name='Стойка активна')),
                ('worker', models.OneToOneField(help_text='Выберите сотрудника, который будет назначен на эту стойку', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник')),
            ],
            options={
                'verbose_name': 'Стойка регистрации',
                'verbose_name_plural': 'Стойки регистрации',
                'permissions': [('view_own_checkindesk', 'Можно видеть только свою стойку'), ('change_worker_checkindesk', 'Можно изменить Сотрудник'), ('change_is_active_checkindesk', 'Можно изменить Стойка активна')],
            },
        ),
        migrations.CreateModel(
            name='FlightTime',
            fields=[
                ('id', models.OneToOneField(help_text='Выберите рейс, для которого будут назначены указанные временные метки', on_delete=django.db.models.deletion.PROTECT, primary_key=True, serialize=False, to='dbapp.flight', verbose_name='Рейс')),
                ('actual_departure', models.DateTimeField(help_text='Введите фактическое время вылета рейса (если вылет из данного аэропорта)', null=True, verbose_name='Фактическое время вылета')),
                ('actual_arrival', models.DateTimeField(help_text='Введите фактическое время прибытия рейса (если вылет из другого аэропорта)', null=True, verbose_name='Фактическое время прибытия')),
                ('check_in_open_time', models.DateTimeField(null=True, verbose_name='Время начала регистрации')),
                ('check_in_close_time', models.DateTimeField(null=True, verbose_name='Время окончания регистрации')),
                ('boarding_open_time', models.DateTimeField(null=True, verbose_name='Время начала посадки')),
                ('boarding_close_time', models.DateTimeField(null=True, verbose_name='Время окончания посадки')),
            ],
            options={
                'verbose_name': 'Временные отметки рейса',
                'verbose_name_plural': 'Временные отметки рейсов',
            },
        ),
        migrations.AddField(
            model_name='passenger',
            name='flight',
            field=models.ForeignKey(help_text='Выберите рейс, на который будет назначен пассажир', on_delete=django.db.models.deletion.PROTECT, to='dbapp.flight', verbose_name='Рейс'),
        ),
        migrations.AddField(
            model_name='flight',
            name='airplane',
            field=models.ForeignKey(help_text='Выберите самолет, который будет выполнять данный рейс', on_delete=django.db.models.deletion.PROTECT, to='dbapp.airplane', verbose_name='Самолет'),
        ),
        migrations.AddField(
            model_name='flight',
            name='arrival_airport',
            field=models.ForeignKey(help_text='Выберите аэропорт прибытия рейса', on_delete=django.db.models.deletion.PROTECT, related_name='arrivals', to='dbapp.airport', verbose_name='Аэропорт прибытия'),
        ),
        migrations.AddField(
            model_name='flight',
            name='departure_airport',
            field=models.ForeignKey(help_text='Выберите аэропорт вылета рейса', on_delete=django.db.models.deletion.PROTECT, related_name='departures', to='dbapp.airport', verbose_name='Аэропорт вылета'),
        ),
        migrations.CreateModel(
            name='CheckInDeskFlight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, help_text='Отметьте, открыта ли регистрация на рейс', verbose_name='Открыта регистрация на рейс')),
                ('desk', models.ForeignKey(help_text='Выберите стойку регистрации, которая будет обслуживать указанный рейс', on_delete=django.db.models.deletion.PROTECT, to='dbapp.checkindesk', verbose_name='Стойка регистрации')),
                ('flight', models.ForeignKey(help_text='Выберите рейс, который будет обслуживаться указанной стойкой регистрации', on_delete=django.db.models.deletion.PROTECT, to='dbapp.flight', verbose_name='Рейс')),
            ],
            options={
                'verbose_name': 'Стойка регистрации, обслуживающая рейс',
                'verbose_name_plural': 'Стойки регистрации, обслуживающие рейсы',
                'permissions': [('change_is_active_checkindeskflight', 'Можно изменить Открыта регистрация на рейс')],
            },
        ),
        migrations.AddField(
            model_name='flight',
            name='flight_status',
            field=models.ForeignKey(help_text='Выберите статус рейса', on_delete=django.db.models.deletion.PROTECT, to='dbapp.flightstatus', verbose_name='Статус рейса'),
        ),
        migrations.CreateModel(
            name='Gate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('number', models.CharField(help_text='Введите номер посадочного выхода', max_length=20, verbose_name='Номер посадочного выхода')),
                ('is_active', models.BooleanField(default=False, help_text='Отметьте, активен ли посадочный выход', verbose_name='Посадочный выход активен')),
                ('worker', models.ForeignKey(help_text='Выберите сотрудника, который будет назначен на этот посадочный выход', on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Сотрудник')),
            ],
            options={
                'verbose_name': 'Посадочный выход',
                'verbose_name_plural': 'Посадочные выходы',
                'permissions': [('view_own_gate', 'Можно видеть только свой выход'), ('change_worker_gate', 'Можно изменить Сотрудник'), ('change_is_active_gate', 'Можно изменить Стойка активна')],
            },
        ),
        migrations.CreateModel(
            name='GateFlight',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_active', models.BooleanField(default=False, help_text='Отметьте, открыт ли выход для посадки пассажиров в самолет', verbose_name='Выход открыт для посадки')),
                ('flight', models.ForeignKey(help_text='Выберите рейс, который будет обслуживаться указанным посадочным выходом', on_delete=django.db.models.deletion.PROTECT, to='dbapp.flight', verbose_name='Рейс')),
                ('gate', models.ForeignKey(help_text='Выберите посадочный выход, который будет обслуживать указанный рейс', on_delete=django.db.models.deletion.PROTECT, to='dbapp.gate', verbose_name='Посадочный выход')),
            ],
            options={
                'verbose_name': 'Посадочный выход, обслуживающий рейс',
                'verbose_name_plural': 'Посадочные выходы, обслуживающие рейсы',
                'permissions': [('change_is_acitve_gateflight', 'Можно изменить Выход открыт для посадки')],
            },
        ),
        migrations.CreateModel(
            name='Baggage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weight', models.DecimalField(decimal_places=2, help_text='Введите вес багажа (кг)', max_digits=5, verbose_name='Вес')),
                ('is_removed', models.BooleanField(default=False, help_text='Отметьте, снят ли багаж с рейса', verbose_name='Багаж снят с рейса')),
                ('passenger', models.ForeignKey(help_text='Выберите пассажира-владельца багажа', on_delete=django.db.models.deletion.PROTECT, to='dbapp.passenger', verbose_name='Пассажир-владелец')),
            ],
            options={
                'verbose_name': 'Багаж',
                'permissions': [('change_passenger', 'Можно изменить Пассажир-владелец'), ('change_weight', 'Можно изменить Вес')],
                'constraints': [models.CheckConstraint(condition=models.Q(('weight__gte', 0.1)), name='weight_more_0')],
            },
        ),
        migrations.AddConstraint(
            model_name='flight',
            constraint=models.CheckConstraint(condition=models.Q(models.Q(('planned_departure__isnull', False), ('planned_arrival__isnull', True)), models.Q(('planned_departure__isnull', True), ('planned_arrival__isnull', False)), _connector='OR'), name='planned_departure_or_planned_arrival_only_filled'),
        ),
    ]
